(()=>{"use strict";var t={677:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Gameboard=void 0;class i{get NumShips(){return this._ships.length}get AllSunk(){return this._allSunk}constructor(t=10){this._ships=[],this._hitPositions=[],this._missedPositions=[],this._occupiedPositions=[],this.generateGrid(t)}placeShip(t,e,i=!0){const{x:s,y:r}=e;if(!this.canPlaceInPosition(t.Length,e,i))return!1;for(let e=0;e<t.Length;e++)i?(this._grid[s+e][r]=t,this._occupiedPositions.push({x:s+e,y:r})):(this._grid[s][r+1]=t,this._occupiedPositions.push({x:s,y:r+1}));return this._ships.push(t),!0}receiveAttack(t){const e=this.checkPosition(t);return e?(e.hit(),this.addHitAttack(t),this.checkAllSunk(e),!0):(this.addMissedAttack(t),!1)}isPositionHit(t,e){return e?this.checkArrayForHit(t,this._missedPositions):this.checkArrayForHit(t,this._hitPositions)}checkArrayForHit(t,e){return null!=e.find((e=>e.x===t.x&&e.y===t.y))}checkPosition(t){const{x:e,y:i}=t;return this._grid[e][i]}generateGrid(t){this._grid=[];for(let e=0;e<t;e++){this._grid[e]=[];for(let i=0;i<t;i++)this._grid[e][i]=null}}canPlaceInPosition(t,e,i){if(this.hasOverlap(t,e,i))return!1;const{x:s,y:r}=e,n=s+t<=this._grid.length&&s>=0,o=r+t<=this._grid[0].length&&r>=0;return i?n:o}addMissedAttack(t){this.isPositionHit(t,!0)||this._missedPositions.push(t)}addHitAttack(t){this.isPositionHit(t,!1)||this._hitPositions.push(t)}checkAllSunk(t){t.isSunk()&&(this._allSunk=this._ships.every((t=>t.isSunk())))}hasOverlap(t,e,i){const{x:s,y:r}=e;let n=!1;for(let e=0;e<t;e++)if(i){const t={x:s+e,y:r};if(n=null!=this._occupiedPositions.find((e=>e.x===t.x&&e.y===t.y)),n)return!0}else{const t={x:s,y:r+e};if(n=null!=this._occupiedPositions.find((e=>e.x===t.x&&e.y===t.y)),n)return!0}return!1}}e.Gameboard=i,t.exports={Gameboard:i}},790:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Computer=e.Player=void 0;const s=i(677);class r{constructor(t=10){this._gameboard=new s.Gameboard(t),this._availableShips=[]}}e.Player=r,e.Computer=class extends r{generateRandomPosition(){}}}},e={};function i(s){var r=e[s];if(void 0!==r)return r.exports;var n=e[s]={exports:{}};return t[s](n,n.exports,i),n.exports}(()=>{const t=i(790);document.createElement("h1").textContent="BATTLESHIP";const e=document.getElementById("main"),s=(new t.Player(10),new t.Player(10),document.createElement("div"));s.id="boardSection";const r=document.createElement("div");r.className="gameBoard",r.id="boardOne";const n=document.createElement("div");n.className="gameBoard",n.id="boardTwo";for(let t=0;t<10;t++)for(let e=0;e<10;e++){const i=document.createElement("div"),s=document.createElement("div");i.className=s.className="boardSquare",i.id=`Player-Square0${t}-${e}`,s.id=`Player2-Square-${t}-${e}`,r.appendChild(i),n.appendChild(s)}r.setAttribute("style","grid-template-columns: repeat(10, 1fr)"),n.setAttribute("style","grid-template-columns: repeat(10, 1fr)"),s.appendChild(r),s.appendChild(n),e.appendChild(s)})()})();